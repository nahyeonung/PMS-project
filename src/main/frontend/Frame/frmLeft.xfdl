<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="frmLeft" width="190" height="570" titletext="New Form" onload="frmLeft_onload">
    <Layouts>
      <Layout height="570" horizontalgap="0" mobileorientation="landscape" spacing="0px" tabletemplate="1* / 1*" verticalgap="0" width="190">
        <Static id="staMain" taborder="0" text="Main Title Menu" left="0" top="0" width="190" height="51" onclick="staMain_onclick" border="1px solid" cssclass="sta_LF_title01"/>
        <Grid id="gridLeftMenu" taborder="1" left="0" top="50" cssclass="grd_LF_treeMenu" autofittype="col" bottom="0" right="0" treeusecheckbox="false" treeinitstatus="expand,all" binddataset="dsLeft" oncellclick="gridLeftMenu_oncellclick">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="190"/>
              </Columns>
              <Rows>
                <Row size="40"/>
              </Rows>
              <Band id="body">
                <Cell displaytype="treeitemcontrol" edittype="tree" treelevel="bind:MENU_LEVEL" treestartlevel="1" text="bind:MENU_NM"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
      </Layout>
    </Layouts>
    <Script type="xscript5.1"><![CDATA[
this.frmLeft_onload = function(obj:nexacro.Form,e:nexacro.LoadEventInfo)
{
	//메뉴가져오는 함수 호출
	this.fnGetLeftMenu();
};

/**
* @description           : 화면 로드 시, 사용자가 상단 메뉴 클릭시 왼쪽 메뉴 가져오는 함수
* @param sMenuId         : 클릭한 상단 메뉴
* @return                : 없음
*/
this.fnGetLeftMenu = function (sMenuId)
{
	//글로벌 데이터셋 pmsMenu 가져오기
	var objApp = nexacro.getApplication();
	var objDsMenu = objApp.pmsMenu;
	
	//선택된 0레벨 메뉴의 하위 메뉴정보로 필터링
	objDsMenu.filter("MENU_ID.indexOf('"+sMenuId+"') == 0 && MENU_LEVEL > 0 ");
	
	//필터 처리된 데이터셋을 복사
	this.dsLeft.copyData(objDsMenu, true);
	
	//필터링 없애기
	objDsMenu.filter("");
};

/**
* @description       :     메뉴 그리드 oncellclick 시 처리
*/
this.gridLeftMenu_oncellclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	//그리드에 바인딩 된 데이터셋으로 가져오기
	var objDsMenu = obj.getBindDataset();
	var sMenuId = objDsMenu.getColumn(e.row, "MENU_ID");
	
	//업무 화면 여는 함수 호출
	this.fnOpenMenu(sMenuId);
};

/**
* @description           : 선택된 메뉴의 업무화면을 활성화하는 함수
* @param sMenuId         : 선택된 왼쪽 메뉴 ID
* @return                : 없음
*/
this.fnOpenMenu = function (sMenuId)
{
	var objApp = nexacro.getApplication();
	
	//글로벌 변수 MDI Frame, Work FrameSet 가져오기
	var objMdiFrame = nexacro.MdiFrame;
	var objWorkFrame = nexacro.WorkFrame;
	
	//메뉴 데이터셋 가져오기
	var objDsMenu = this.gridLeftMenu.getBindDataset();
	
	//글로벳 데이터셋 gdsOpenMenu 가져오기
	var objDsOpenMenu = objApp.gdsOpenMenu;
	
	//오픈할 메뉴 정보 가져오기
	var nFRow = objDsMenu.findRow("MENU_ID", sMenuId);
	var sMenuNm = objDsMenu.getColumn(nFRow, "MENU_NM");
	var sMenuPath = objDsMenu.getColumn(nFRow, "MENU_PATH");
	
	//이미 오프된 메뉴인지 확인
	var nFRowOpen = objDsOpenMenu.findRow("MENU_ID", sMenuId);
	var nOpenMenuRowCnt = objDsOpenMenu.rowcount;
	
	//이미 오픈된 메뉴일 경우 해당 메뉴를 Active
	if(nFRowOpen > -1)
	{
		//MDI Frame에 정의된 Active 함수 호출
		objMdiFrame.form.fnActiveTabPage(sMenuId);
		return;
	}
	//메뉴가 열려있지 않다면
	else
	{
		//이미 오픈된 메뉴가 7개 일 경우 예외처리
		if(nOpenMenuRowCnt >= 7) {
			alert("7개 이상 열 수 없습니다. skr");
			return;
		}
		//메뉴의 경로가 없는 경우
		if(sMenuPath == null || sMenuPath.length == 0) {
			alert("경로가 존재하지 않습니다.");
			return;
		}
		//업무화면을 구성하기 위한 childframe 생성
		var objChildFrame = new ChildFrame();
		objChildFrame.init(sMenuId, 10, 30, 200, 500 ,null, null);
		
		//업무화면에 전달할 파라미터 정보
		var oParam = {menumn : sMenuNm,
					  menupath : sMenuPath
					  };
					  
		//workframe에 자식으로 추가
		objWorkFrame.addChild(objChildFrame.name, objChildFrame);
		
		//업무 화면용 ChildFrame에 공통 속성 적용
		objChildFrame.set_openstatus('maximize');
		objChildFrame.set_showtitlebar('false');
		objChildFrame.set_formurl("Frame::frmWork.xfdl");
		objChildFrame.param = oParam;
		objChildFrame.show(); 
		
		//열린화면 데이터셋에 정보 추가 함수 호출
		this.fnAddOpenMenu(sMenuId);
		
		//MDI Frame에 정의된 MDI Tab 추가 함수 호출
		objMdiFrame.form.fnAddTabPage(sMenuId, sMenuNm);
		}
};

/**
* @description          : 열린화면 데이터셋 추가 함수
* @param sMenuId        : 추가할 메뉴 ID
* @return               : 없음
*/
this.fnAddOpenMenu = function (sMenuId)
{
	//글로벌 데이터셋 gdsOpenMenu 가져오기
	var objApp = nexacro.Application;
	var objDsOpenMenu = objApp.gdsOpenMenu;
	
	//마지막 row에 새로운 값 추가
	var nRow = objDsOpenMenu.addRow();
	objDsOpenMenu.setColumn(nRow, "MENU_ID", sMenuId);
};

/**
* @description           : 열린화면 데이터셋 삭제 함수
* @param sMenuId         : 열린 메뉴 ID
* @return                : 없음
*/
this.fnDelOpenMenu = function (sMenuId)
{
	//글로벌 데이터셋 gdsOpenMenu 가져오기
	var objApp = nexacro.getApplication();
	
	var objDsOpenMenu = objApp.gdsOpenMenu;
	
	//sMenuId로 데이터셋에서 row 찾기
	var nRow = objDsOpenMenu.findRow("MENU_ID", sMenuId);
	
	//데이터셋에서 찾은 row 삭제
	objDsOpenMenu.deleteRow(nRow);
};
]]></Script>
    <Objects>
      <Dataset id="dsLeft">
        <ColumnInfo>
          <Column id="MENU_ID" type="STRING" size="256"/>
          <Column id="MENU_NM" type="STRING" size="256"/>
          <Column id="MENU_LEVEL" type="STRING" size="256"/>
          <Column id="MENU_PATH" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
  </Form>
</FDL>
